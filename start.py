from openpyxl import load_workbook
import os
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import AxesGrid
from time import time

CPP_RUN = True
PROCESS_GRAPH = False
GRAPH_PARTICLES = False
VERIFY_VALUES = False

WRITE_BIN = 0
WRITE_SNIPPETS = 0
WRITE_REMEDIANS = 0
WRITE_PARTICLES = 0

ELECTRODE_LOCATIONS = "300 400 500 600"

DATA_PATH = r"data.bin"
DATA_PATH_CMD = f'"{DATA_PATH}"'

HEADER_DATA = bytes([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x08, 0x36, 0x02, 0x00, 0x00, 0x08, 0x36, 0x03,
    0x00, 0x00, 0x08, 0x36, 0x04, 0x00, 0x00, 0x08, 0x36, 0x05, 0x00, 0x00, 0x07, 0xD0, 0x06, 0x00,
    0x00, 0x07, 0xD0, 0x07, 0x00, 0x00, 0x07, 0xD0, 0x08, 0x00, 0x00, 0x07, 0xD0, 0x09, 0x00, 0x00,
    0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
    0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x00, 0x00, 0x01, 0x00,
    0x10, 0x00, 0x00, 0x03, 0xE8, 0x11, 0x00, 0x00, 0x00, 0xF0, 0x12, 0x00, 0x00, 0x00, 0x0F, 0x13,
    0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x01, 0x16, 0x00,
    0x01, 0xBA, 0xB5, 0x17, 0x00, 0x00, 0x02, 0xEE, 0x18, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00,
    0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,
    0x00, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x23,
    0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00,
    0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00,
    0x00, 0x00, 0x2A, 0x44, 0x61, 0x74, 0x61, 0x20, 0x4E, 0x6F, 0x74, 0x20, 0x41, 0x76, 0x61, 0x69,
    0x6C, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x2B, 0x31, 0x30, 0x75, 0x6D, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x2C, 0x44, 0x49, 0x20, 0x57, 0x61, 0x74, 0x65, 0x72, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D,
    0x34, 0x2E, 0x30, 0x6D, 0x4C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2E, 0x37,
    0x75, 0x6D, 0x20, 0x73, 0x65, 0x6E, 0x73, 0x6F, 0x72, 0x20, 0x74, 0x65, 0x73, 0x74, 0x2C, 0x20,
    0x52, 0x65, 0x64, 0x20, 0x4C, 0x45, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
])

# Initializes the data file with header information
if WRITE_BIN:
    with open(DATA_PATH, "wb") as f:
        f.write(HEADER_DATA)

# Clears all snippet files
if WRITE_SNIPPETS:
    for i in range(4):
        open(f"out{i}.csv", "w").close()

# Clears all remedian files
if WRITE_REMEDIANS:
    for i in range(4):
        open(f"remedians{i}.csv", "w").close()

# Runs the C++ program
if CPP_RUN:
    time0 = time()

    os.system(f"program.exe {DATA_PATH_CMD} {WRITE_BIN} {WRITE_SNIPPETS} {WRITE_REMEDIANS} {WRITE_PARTICLES} {ELECTRODE_LOCATIONS}")  # Runs the program with parameters
    time1 = time()

    print("C++ Finished in {:.2f} Seconds".format(time1 - time0))

# Processes and graphs the data for each snippet
if PROCESS_GRAPH:
    # For every output .csv file
    for i in range(4):
        time1 = time()
        print("Data Processing Start")
        plot = list()
        with open(f"out{i}.csv", "r") as f:
            # Loops through every frame
            for line in f:
                # If the line is not empty
                if line != "\n":
                    # Reads the remediated data, converts it to integer data
                    raw_data = list(np.array((line.strip()).split(","))[4:35].astype(int))
                    plot.append(raw_data)  # Saves the processed data

        time2 = time()
        print("Data Processing Finished in {:.2f} Seconds".format(time2-time1))

        print("Graphing Start")
        plot = np.array(plot).transpose()  # Transposes the data (so it's horizontal instead of vertical)
        plt.figure(1, figsize=(12, 6))  # Sets the aspect ratio of the data
        # Labels
        plt.title(f"Electrode {i} Heat Map")
        plt.ylabel('PIXEL NUMBER')
        plt.xlabel('SAMPLE [750US/SAMPLE]')
        # Defines the heatmap with min/max values and colours
        plt.imshow(plot, cmap="magma", aspect="auto", interpolation="none", vmin=-800, vmax=800)
        plt.colorbar()
        plt.savefig(f"map{i}.png")  # Saves the heatmap to a .png
        plt.close()
        time3 = time()
        print("Graphing Finished in {:.2f} Seconds".format(time3-time2))

# Graphs each particle
if GRAPH_PARTICLES:
    with open("particles.csv", "r") as f:
        trackParticles = False
        for index, line in enumerate(f):
            if trackParticles:
                try:
                    count += 1
                    numArr = np.array((line.strip()).split(",")[:-1]).astype(int)
                    particleArr = np.array([numArr[31*i:31*i+31] for i in range(30)]).transpose()
                    grid[count - 1].imshow(particleArr, cmap="magma", aspect="auto", interpolation="none")
                    if count == 4:
                        if similar:
                            plt.savefig(f"Detected Similar Particles\\Frame {frame} Electrode {chosenElectrode} Chosen with Weight {weight}")
                        else:
                            plt.savefig(f"Detected Particles\\Frame {frame} Electrode {chosenElectrode} Chosen with Weight {weight}")
                        plt.close()
                        trackParticles = False
                except ValueError:
                    fig = None
                    grid = None
                    plt.close()
                    trackParticles = False
            if len(line.strip().split(",")) <= 6 and line[0] != ",":
                chosenElectrode = int(line.strip().split(",")[0])
                frame = int(line.strip().split(",")[1])
                weight = int(line.strip().split(",")[2])
                similar = int(line.strip().split(",")[3])
                if 200 <= frame:
                    trackParticles = True
                    fig = plt.figure()
                    grid = AxesGrid(fig, 111, nrows_ncols=(4, 1))
                    count = 0
